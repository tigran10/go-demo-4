import java.text.SimpleDateFormat


pipeline {
    agent {
        kubernetes {
            label "builder-pod-${UUID.randomUUID().toString()}"
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: builder-pod
spec:
  containers:
  - name: helm
    image: vfarcic/helm:2.8.2
    command:
    - cat
    tty: true
  - name: go
    image: golang:1.10
    command:
    - cat
    tty: true
  - name: git
    image: alpine/git
    command:
    - cat
    tty: true
  - name: docker
    image: docker
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock-volume
  volumes:
  - name: docker-sock-volume
    hostPath:
      path: /var/run/docker.sock
      type: File
"""
        }
    }

    parameters {
        string(name: 'project', defaultValue: 'go-demo-4')
        string(name: 'image', defaultValue: 'digitalinside/go-demo-4')
        string(name: 'domain', defaultValue: '10.217.32.221.nip.io')
        string(name: 'addr', defaultValue: 'go-demo-4.10.217.32.221.nip.io')
        string(name: 'cmAddr', defaultValue: 'cm.4.10.217.32.221.nip.io')
        string(name: 'chartVer', defaultValue: '0.0.1')
    }

    options {
        timeout(time: 45, unit: 'MINUTES')
    }

    environment {
        GH_USER="tigran10" // Replace me
        DH_USER="digitalinside" // Replace me
        PROJECT="go-demo-4"
    }

    stages {
        stage("prep") {
            steps {
                script {
                    env.GIT_COMMIT = sh (script: """ git rev-parse HEAD """, returnStdout: true).trim()
                    env.shortGitCommit = "${env.GIT_COMMIT[0..10]}"
                    currentBuild.displayName = new SimpleDateFormat("yy.MM.dd").format(new Date()) + "-" + env.BUILD_NUMBER
                }
            }
        }


        stage('build') {
            steps {
                container('docker') {
                    ciK8sBuildImage(params.image)
                }
            }
        }

        stage("func-test") {
            steps {
                container("helm") {
                    ciK8sUpgradeBeta(params.project, params.domain)
                }

                container("kubectl") {
                    k8sRolloutBeta(params.project)
                }

                container("golang") {
                    ciK8sFuncTestGolang(params.project, params.domain)
                }
            }

            post {
                always {
                    container("helm") {
                        k8sDeleteBeta(props.project)
                    }
                }
            }
        }
    }
}