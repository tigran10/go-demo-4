pipeline {
    agent {
        kubernetes {
            label "builder-pod-${UUID.randomUUID().toString()}"
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: builder-pod
spec:
  containers:
  - name: helm
    image: vfarcic/helm:2.8.2
    command:
    - cat
    tty: true
  - name: golang
    image: golang:1.9
    command: ["cat"]
    tty: true
  - name: git
    image: alpine/git
    command:
    - cat
    tty: true
  - name: gren
    image: digitalinside/gren:latest
    command:
    - cat
    tty: true    
  - name: kubectl
    image: vfarcic/kubectl
    command: ["cat"]
    tty: true
  - name: docker
    image: docker
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock-volume
  volumes:
  - name: docker-sock-volume
    hostPath:
      path: /var/run/docker.sock
      type: File
"""
        }
    }

    parameters {
        string(name: 'project', defaultValue: 'go-demo-3')
        string(name: 'image', defaultValue: 'digitalinside/go-demo-3')
        string(name: 'domain', defaultValue: '10.64.108.181.nip.io')
        string(name: 'addr', defaultValue: 'go-demo-3.10.64.108.181.nip.io')
        string(name: 'uatAddr', defaultValue: 'uat.go-demo-3.10.64.108.181.nip.io')
        string(name: 'cmAddr', defaultValue: 'cm.4.10.64.108.181.nip.io')
        string(name: 'chartVer', defaultValue: '0.0.1')

        // new
        string(name: 'rsaKey', defaultValue: 'TM_RSA')
        string(name: 'githubToken', defaultValue: 'GITHUB_TOKEN')
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 45, unit: 'MINUTES')
    }

    stages {

        stage('build') {
            steps {
                ciPrettyBuildNumber()

                container('git') {
                    ciWithGitKey(params.rsaKey) {
                        ciBuildEnvVars()
                    }
                }

                container('docker') {
                    //for feature branch
                    ciK8sBuildImage(params.image, false, env.BUILD_TAG)
                }
            }
        }

        stage("func-test") {
            steps {
                container("helm") {
                    ciK8sUpgradeBeta(params.project, params.domain, env.BUILD_TAG)
                }

                container("kubectl") {
                    ciK8sRolloutBeta(params.project)
                }

                container("golang") {
                    ciK8sFuncTestGolang(params.project, params.domain)
                }
            }

            post {
                failure {
                    container("helm") {
                        ciK8sDeleteBeta(params.project)
                    }
                }
            }
        }


        stage("Release & Deploy") {
            when {
                anyOf {
                    branch "master"
                    branch "hotfix-*"
                }
            }

            steps {
                script {
                    container("git") {
                        ciWithGitKey(params.rsaKey) {
                            env.RELEASE_TAG = ciSuggestVersion(ciVersionRead())
                        }
                    }

                    container("helm") {
                        // you can have your master builds running for some time until someone decides to promote it.
                        // better to autodelete the deployment when it times out
                        ciDeleteAfterTimingOut(2, 'MINUTES') {

                            ciConditionalInputExecution("Deploy Gate",
                                    "Deploy ${params.project} to UAT?",
                                    "ok", "deploy2uat") {

                                //docker tag
                                container('docker') {
                                    ciRetag(env.BUILD_TAG, false, ["latest", "${env.shortGitCommit}", env.RELEASE_TAG])
                                }

                                //git tag
                                container('git') {
                                    ciWithGitKey(params.rsaKey) {
                                        ciTagGitRelease(env.RELEASE_TAG)
                                    }
                                }

                                container('gren') {
                                    //https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
                                    withCredentials([string(credentialsId: params.githubToken, variable: 'TOKEN')]) {
                                        sh "gren release --token=${TOKEN}"
                                    }
                                }

//                              container("helm") {
//                                  k8sPushHelm(params.project, env.RELEASE_TAG, params.cmAddr)
//                              }


                                container("helm") {
                                    ciK8sUpgrade(props.project, params.uatAddr, "${project}-uat", env.RELEASE_TAG)
                                }
                                container("kubectl") {
                                    ciK8sRollout(params.project, "${project}-uat")
                                }
                                container("golang") {
                                    k8sProdTestGolang(params.uatAddr)
                                }
                            }


                        }
                    }

                }
            }
        }
    }

    post {
        always {
            ciWhenNotReleaseBranches {
                container("helm") {
                    // this will delete feature branch deployments, unless someone wants to keep it running
                    // later it should be deleted manually, or with PR merge hook
                    ciDeleteAfterTimingOut(1, 'MINUTES') {

                        ciConditionalInputExecution("delete feature",
                                "delete feature deployment?",
                                "continue",
                                "delete deployment") {
                            ciK8sDeleteBeta(params.project)
                        }

                    }
                }
            }
        }
    }
}


//todo
//                        ######### untested for now  #########



//                       ##################